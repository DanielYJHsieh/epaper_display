/*
 * GDEQ0426T82 + WeMos D1 Mini 主程式 (記憶體優化版)
 * 
 * 移除了部分功能以節省記憶體：
 * - 簡化序列埠輸出
 * - 移除詳細診斷
 * - 優化測試流程
 * 
 * 使用 GxEPD2 函式庫驅動 GDEQ0426T82 4.26吋電子紙
 */

#include <GxEPD2_BW.h>
#include <gdeq/GxEPD2_426_GDEQ0426T82.h>

// ==================== 腳位定義 ====================
#define EPD_CS    15  // D8 - CS (必須加 3.3k 下拉電阻到 GND)
#define EPD_DC     0  // D3 - DC
#define EPD_RST    5  // D1 - RST (建議加 1k 上拉電阻到 3.3V)  
#define EPD_BUSY   4  // D2 - BUSY

// ==================== 顯示器物件 ====================
// 強制使用 GxEPD2_426_GDEQ0426T82 驅動程式
GxEPD2_BW<GxEPD2_426_GDEQ0426T82, GxEPD2_426_GDEQ0426T82::HEIGHT> display(GxEPD2_426_GDEQ0426T82(EPD_CS, EPD_DC, EPD_RST, EPD_BUSY));

void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Serial.println("=== 記憶體優化版 GDEQ0426T82 測試 ===");
  
  // 顯示初始記憶體
  Serial.print("初始記憶體: ");
  Serial.print(ESP.getFreeHeap());
  Serial.println(" bytes");
  
  // 最小腳位設定
  pinMode(EPD_BUSY, INPUT);
  pinMode(EPD_RST, OUTPUT);
  pinMode(EPD_DC, OUTPUT);
  pinMode(EPD_CS, OUTPUT);
  
  digitalWrite(EPD_CS, HIGH);
  digitalWrite(EPD_DC, HIGH);
  digitalWrite(EPD_RST, HIGH);
  
  delay(100);
  
  // 硬體重置
  digitalWrite(EPD_RST, LOW);
  delay(200);
  digitalWrite(EPD_RST, HIGH);
  delay(200);
  
  Serial.print("腳位設定後: ");
  Serial.print(ESP.getFreeHeap());
  Serial.println(" bytes");
  
  // 初始化顯示器
  display.init(115200, true, 2, false);
  
  Serial.print("顯示器初始化後: ");
  Serial.print(ESP.getFreeHeap());
  Serial.println(" bytes");
  
  Serial.print("螢幕: ");
  Serial.print(display.width());
  Serial.print("x");
  Serial.println(display.height());
  
  Serial.println("開始測試...");
}

void loop() {
  static int testStep = 0;
  static unsigned long lastTest = 0;
  
  if (millis() - lastTest > 12000) {  // 每 12 秒執行一次
    lastTest = millis();
    testStep++;
    
    Serial.print("步驟 ");
    Serial.print(testStep);
    Serial.print(" - 記憶體: ");
    Serial.print(ESP.getFreeHeap());
    Serial.println(" bytes");
    
    switch (testStep) {
      case 1:
        testClearScreen();
        break;
      case 2:
        testSimplePartial();
        break;
      default:
        testStep = 0;  // 重置循環
        break;
    }
    
    Serial.flush();
  }
}

void testClearScreen() {
  Serial.println("清除螢幕...");
  display.setRotation(0);
  display.fillScreen(GxEPD_WHITE);
  display.display(false);
  
  Serial.println("等待 8 秒...");
  delay(8000);
  Serial.println("清除完成");
}

void testSimplePartial() {
  Serial.print("部分更新測試 - 記憶體: ");
  Serial.print(ESP.getFreeHeap());
  Serial.println(" bytes");
  
  if (ESP.getFreeHeap() < 1500) {
    Serial.println("記憶體不足，跳過");
    return;
  }
  
  // 建立簡單背景
  Serial.println("建立背景...");
  display.setFullWindow();
  display.fillScreen(GxEPD_WHITE);
  
  // 畫邊框
  display.drawRect(0, 0, display.width()-1, display.height()-1, GxEPD_BLACK);
  display.drawRect(2, 2, display.width()-5, display.height()-5, GxEPD_BLACK);
  
  display.display(false);
  Serial.println("背景更新中，等待 8 秒...");
  delay(8000);
  
  // 執行部分更新
  delay(2000);
  Serial.println("執行部分更新...");
  
  // 小的更新區域 - 右下角
  int updateX = display.width() * 2 / 3;
  int updateY = display.height() * 2 / 3;
  int updateW = display.width() / 3 - 20;
  int updateH = display.height() / 3 - 20;
  
  Serial.print("區域: ");
  Serial.print(updateX);
  Serial.print(",");
  Serial.print(updateY);
  Serial.print(",");
  Serial.print(updateW);
  Serial.print("x");
  Serial.println(updateH);
  
  display.setPartialWindow(updateX, updateY, updateW, updateH);
  display.fillScreen(GxEPD_WHITE);
  display.drawRect(0, 0, updateW, updateH, GxEPD_BLACK);
  display.fillRect(10, 10, updateW-20, updateH-20, GxEPD_BLACK);
  
  display.display(true);  // 部分更新
  
  Serial.println("部分更新執行中，等待 5 秒...");
  delay(5000);
  
  Serial.println("部分更新完成");
  display.setFullWindow();
}

// 程式結束
